// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/sdivyansh59/digantara-backend-golang-assignment/app/job"
	"github.com/sdivyansh59/digantara-backend-golang-assignment/app/scheduler"
	"github.com/sdivyansh59/digantara-backend-golang-assignment/app/setup"
	"github.com/sdivyansh59/digantara-backend-golang-assignment/app/setup/dbconfig"
	"github.com/sdivyansh59/digantara-backend-golang-assignment/internal-lib/utils"
)

// Injectors from wire.go:

// InitializeApp wires up all dependencies and returns the application/service instance
func InitializeApp() (*App, error) {
	mux := setup.ProvideSingletonChiRouter()
	api := setup.ProvideSingletonHuma(mux)
	defaultConfig := utils.ProvideDefaultConfig()
	logger, err := utils.InitGlobalLogger(defaultConfig)
	if err != nil {
		return nil, err
	}
	withLogger, err := utils.NewWithLogger(logger)
	if err != nil {
		return nil, err
	}
	generator, err := setup.ProvideSnowflakeGenerator()
	if err != nil {
		return nil, err
	}
	converter := job.NewConverter()
	jobSchedulerDB, err := dbconfig.ProvideJobSchedulerDB(logger, withLogger, defaultConfig)
	if err != nil {
		return nil, err
	}
	iRepository := job.NewRepository(generator, jobSchedulerDB)
	controller := job.NewController(withLogger, generator, converter, iRepository)
	schedulerController := scheduler.NewController(withLogger, generator, iRepository, converter)
	controllers := setup.ProvideControllers(controller, schedulerController)
	app := newApp(mux, api, defaultConfig, controllers, withLogger, jobSchedulerDB)
	return app, nil
}
